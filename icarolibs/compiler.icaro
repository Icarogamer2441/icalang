def partnum 0 end
def incpart 1 end

fun stppop
    pop stopwhile
end

fun cmpsay
    while
        0 != if print
        0 == if stppop
    end
end

fun CompStart
    "section .text\n global _start\n\n_start:\n" cmpsay
end

fun CompMsg
    add partnum incpart stop
    partnum "jmp part_" 32 cmpsay tostr cmpsay 10 print
    partnum "section .data\n msg_" cmpsay tostr cmpsay 32 print "db '" cmpsay cmpsay "'" cmpsay
    partnum ", 0\n msglen_" cmpsay tostr cmpsay 32 print partnum "equ $ - msg_" cmpsay tostr cmpsay
    "- 1" 32 cmpsay 10 print
    "section .text\n" cmpsay
    ":\n" partnum "part_" cmpsay tostr cmpsay cmpsay
    partnum "mov rax, 1\n mov rdi, 1\n mov rsi, msg_" 32 cmpsay tostr cmpsay 10 print
    partnum "mov rdx, msglen_" 32 cmpsay tostr cmpsay 10 print "syscall\n" 32 cmpsay
end

fun CompAsciiMsg
    add partnum incpart stop
    partnum "jmp part_" 32 cmpsay tostr cmpsay 10 print
    partnum "section .data\n ascmsg_" cmpsay tostr cmpsay "db " 32 cmpsay tostr cmpsay
    partnum ", 0\n" cmpsay
    "section .text\n" cmpsay
    ":\n" partnum "part_" cmpsay tostr cmpsay cmpsay
    partnum "mov rax, 1\n mov rdi, 1\n mov rsi, ascmsg_" 32 cmpsay tostr cmpsay 10 print
    "mov rdx, 1\n syscall\n" 32 cmpsay
end

fun CompEnd
    "\n mov rax, 60\n mov rdi, 0\n syscall\n" cmpsay
end

/* how to use: *\
/* CompStart "my message" CompMsg 10 CompAsciiMsg CompEnd *\
/* executing: *\
/* execute your icalang file and use this: *\
/* ./output > "myfile.asm" *\
